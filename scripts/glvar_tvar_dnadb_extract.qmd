---
title: "Extract germline and tumour variant data from DNA Database"
format: 
  docx:
    reference-doc: north_west_glh_document_template.docx
fig-align: "left"
fig-wdith: 6
---

```{r}
#| label: packages-and-dna-db-connection
#| include: FALSE

library(tidyverse)

source(here::here("scripts/connect_to_sql_server.R"))

```

# Identify all samples from patients with SeqOne testing

```{r}
#| label: load-gi-csv-data
#| include: FALSE

gi_csv_cleaned <- read_csv(file = paste0(config::get(
  "data_folderpath"),
  "02_cleaned/",
  "gi_csv_cleaned_orpp.csv"),
  col_types = list(
    nhsno = col_character()
  ))

stopifnot(nrow(gi_csv_cleaned) != 0)
stopifnot(anyNA(gi_csv_cleaned$nhsno) == FALSE)

```

```{r}
#| label: find-all-patient-lab-numbers
#| include: FALSE

gi_nhsnos <- gi_csv_cleaned$nhsno

labno_df <- sample_tbl |> 
  filter(nhsno %in% gi_nhsnos) |> 
  select(labno, nhsno) |> 
  collect()

stopifnot(length(setdiff(unique(labno_df$nhsno), gi_nhsnos)) == 0)
stopifnot(anyNA.data.frame(labno_df) == FALSE)

labno_query <- unique(labno_df$labno)

```

There are SeqOne results for `r length(gi_nhsnos)` unique patients, based on their NHS numbers.
The script then queries the DNA Database to check for all other DNA numbers which are linked to these NHS numbers.
`r nrow(labno_df)` different DNA numbers have been found.

```{r}
#| label: result-tbl
#| include: FALSE

dnadb_results <- results_tbl |> 
  filter(labno %in% labno_query) |> 
  select(labno, genodate, pcrid, test, genotype, genotype2,
         genocomm) |> 
  collect()

stopifnot(nrow(dnadb_results) != 0)

```

# Identify results from germline *BRCA* testing

```{r}
#| label: identify-glvar-results
#| include: FALSE

icp_grep_strings <- unique(grep(pattern = "hs2(\\s|)icp", 
            x = dnadb_results$test, 
            ignore.case = TRUE, 
            value = TRUE))

icp_test_strings <- c(icp_grep_strings,
                      "NGS SSXT ICP",
                      "ICP PANEL",
                      "SSXT ICP NGS",
                      "ICP SSXT NGS",
                      "Panel re-analysis of 24043064 from WS144546",
                      "NGS SSXT ICPv4",
                      "SSXTHS2 ICPv4",
                      "ICPv4 NGS SSXT HS2")

glvar_dnadb_results <- dnadb_results |> 
  filter(test %in% icp_test_strings) |> 
  left_join(labno_df, by = "labno") |> 
  relocate(nhsno)

```

The script looks for germline *BRCA* testing results based on the "test" column in the DNA Database results table.
The "test" column is free type, so many different versions of the test have been written.
The script has found `r length(icp_test_strings)` different ways that germline *BRCA* testing has been described, which are listed below.
In total, `r nrow(glvar_dnadb_results)` germline results have been found.
These results range from
`r format.Date(x = min(glvar_dnadb_results$genodate), format = "%d %B %Y")` to
`r format.Date(x = max(glvar_dnadb_results$genodate), format = "%d %B %Y")`.

```{r}
#| label: tbl-icp-test-strings
#| echo: FALSE

knitr::kable(glvar_dnadb_results |> 
               filter(!duplicated(test)) |> 
               select(test) |> 
               arrange(test))

```

# Identify results from tumour *BRCA* testing

```{r}
#| label: identify-tbrca-results
#| include: FALSE

pansolid_grep_strings <- unique(grep(pattern = "seq\\span", 
                                     x = dnadb_results$test, 
                                     ignore.case = TRUE, 
                                     value = TRUE))

pansolid_test_strings <- c(pansolid_grep_strings,
                           "NGS Pansolid", "NGS PanSolid QIAseq")

tvar_dnadb_results <- dnadb_results |> 
  filter(test %in% pansolid_test_strings) |> 
  left_join(labno_df, by = "labno") |> 
  relocate(nhsno)

```

The script now does the same thing for tumour *BRCA* results.
There are `r length(pansolid_test_strings)` different ways that tumour *BRCA* testing has been described, and 
`r nrow(tvar_dnadb_results)` results have been found, ranging from
`r format.Date(x = min(tvar_dnadb_results$genodate), format = "%d %B %Y")` to
`r format.Date(x = max(tvar_dnadb_results$genodate), format = "%d %B %Y")`.

# Export data

```{r}
#| label: export-data
#| include: FALSE

write_csv(glvar_dnadb_results,
          paste0(config::get(
            "data_folderpath"),
            "01_initial/",
            "glvar_dnadb_extracted.csv"))

write_csv(tvar_dnadb_results,
          paste0(config::get(
            "data_folderpath"),
            "01_initial/",
            "tvar_dnadb_extracted.csv"))

```
